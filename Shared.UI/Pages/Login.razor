@page "/login"

@using Shared.Clients
@inject AuthServiceClient AuthServiceClient
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<h3>Login</h3>

@if (isBusy)
{
    <p>Signing in...</p>
}
else
{
    <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Username:</label>
            <InputText @bind-Value="loginModel.Username" />
        </div>
        <div>
            <label>Password:</label>
            <InputText @bind-Value="loginModel.Password" type="password" />
        </div>

        <button type="submit">Login</button>
    </EditForm>

    @if (loginFailed)
    {
        <p style="color:red;">Login failed. Please try again.</p>
    }
}

@code {
    private LoginModel loginModel = new();
    private bool isBusy = false;
    private bool loginFailed = false;

    private async Task HandleLogin()
    {
        isBusy = true;
        loginFailed = false;

        var success = await AuthServiceClient.SignInAsync(loginModel.Username, loginModel.Password);

        if (success)
        {
            // Notify Blazor that auth state changed
#if WINDOWS || ANDROID || IOS
            if (AuthStateProvider is HybridAuthStateProvider hybridProvider)
            {
                hybridProvider.NotifyAuthenticationStateChanged();
            }
#else
            if (AuthStateProvider is WebAuthStateProvider webProvider)
            {
                webProvider.NotifyAuthenticationStateChanged();
            }
#endif

            // Redirect to home page or protected page
            Navigation.NavigateTo("/");
        }
        else
        {
            loginFailed = true;
        }

        isBusy = false;
    }

    public class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}